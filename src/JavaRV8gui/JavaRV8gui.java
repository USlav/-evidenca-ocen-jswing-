/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JavaRV8gui;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.System.exit;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author uporabnik
 */
public class JavaRV8gui extends javax.swing.JFrame {

    Predmet predmet[] = new Predmet[N];
    int stevec = 0;
    int temp_predmet = 0;
    int selectedRow = 0;
    int selectedColumn = 0;
    int ostaliPodatki = 0;
    int letnik = 0;
    boolean temp = false;
    DefaultTableModel tableModel;
    DefaultListModel model = new DefaultListModel();

    /**
     * Creates new form JavaRV8gui
     */
    public JavaRV8gui() {
        initComponents();
        tableModel = (DefaultTableModel) jTableVnosObveznosti.getModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupLetniki = new javax.swing.ButtonGroup();
        jButton1Nalozi = new javax.swing.JButton();
        jButton2Shrani = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1Predmeti = new javax.swing.JPanel();
        jLabel1SeznamPredmetov = new javax.swing.JLabel();
        jRadioButton1Letnik = new javax.swing.JRadioButton();
        jRadioButton2Letnik = new javax.swing.JRadioButton();
        jRadioButton3Letnik = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaPredmeti = new javax.swing.JTextArea();
        jRadioButtonVsiPredmeti = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jComboBox1Predmeti = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaOceneObveznosti = new javax.swing.JTextArea();
        jCheckBoxKoncneOcene = new javax.swing.JCheckBox();
        jLabelOceneLetnika = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2SeznamPredmetov = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableVnosObveznosti = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldDodajObveznost = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldDodajPredmet = new javax.swing.JTextField();
        jButtonOdstraniPredmet = new javax.swing.JButton();
        jButtonOdstraniObveznost = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldVnosOcen = new javax.swing.JTextField();
        jComboBoxOstaliPodatki = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldOstaliPodatki = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaVsiPodatki = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxPodatkiObveznosti = new javax.swing.JCheckBox();
        jButtonOsveziPodatke = new javax.swing.JButton();
        jPanel4Status = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jButtonIzhod = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1Nalozi.setText("Naloži");
        jButton1Nalozi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1NaloziActionPerformed(evt);
            }
        });

        jButton2Shrani.setText("Shrani");
        jButton2Shrani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ShraniActionPerformed(evt);
            }
        });

        jLabel1SeznamPredmetov.setText("Seznam vseh predmetov:");

        buttonGroupLetniki.add(jRadioButton1Letnik);
        jRadioButton1Letnik.setText("1. letnik");
        jRadioButton1Letnik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1LetnikActionPerformed(evt);
            }
        });

        buttonGroupLetniki.add(jRadioButton2Letnik);
        jRadioButton2Letnik.setText("2. letnik");
        jRadioButton2Letnik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2LetnikActionPerformed(evt);
            }
        });

        buttonGroupLetniki.add(jRadioButton3Letnik);
        jRadioButton3Letnik.setText("3. letnik");
        jRadioButton3Letnik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3LetnikActionPerformed(evt);
            }
        });

        jTextAreaPredmeti.setEditable(false);
        jTextAreaPredmeti.setColumns(20);
        jTextAreaPredmeti.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextAreaPredmeti.setRows(5);
        jScrollPane1.setViewportView(jTextAreaPredmeti);

        buttonGroupLetniki.add(jRadioButtonVsiPredmeti);
        jRadioButtonVsiPredmeti.setText("Vsi");
        jRadioButtonVsiPredmeti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonVsiPredmetiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1PredmetiLayout = new javax.swing.GroupLayout(jPanel1Predmeti);
        jPanel1Predmeti.setLayout(jPanel1PredmetiLayout);
        jPanel1PredmetiLayout.setHorizontalGroup(
            jPanel1PredmetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1PredmetiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1PredmetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1PredmetiLayout.createSequentialGroup()
                        .addComponent(jLabel1SeznamPredmetov)
                        .addContainerGap(756, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1PredmetiLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1PredmetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1PredmetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jRadioButton2Letnik)
                                .addComponent(jRadioButton1Letnik)
                                .addComponent(jRadioButton3Letnik))
                            .addComponent(jRadioButtonVsiPredmeti))
                        .addGap(47, 47, 47))))
        );
        jPanel1PredmetiLayout.setVerticalGroup(
            jPanel1PredmetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1PredmetiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1SeznamPredmetov)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1PredmetiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1PredmetiLayout.createSequentialGroup()
                        .addComponent(jRadioButton1Letnik)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2Letnik)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3Letnik)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonVsiPredmeti))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(288, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PREDMETI", jPanel1Predmeti);

        jComboBox1Predmeti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1PredmetiActionPerformed(evt);
            }
        });

        jLabel1.setText("Ocene:");

        jTextAreaOceneObveznosti.setEditable(false);
        jTextAreaOceneObveznosti.setColumns(20);
        jTextAreaOceneObveznosti.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextAreaOceneObveznosti.setRows(5);
        jScrollPane2.setViewportView(jTextAreaOceneObveznosti);

        jCheckBoxKoncneOcene.setText("KONČNE OCENE");
        jCheckBoxKoncneOcene.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxKoncneOceneStateChanged(evt);
            }
        });
        jCheckBoxKoncneOcene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxKoncneOceneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelOceneLetnika, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jComboBox1Predmeti, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxKoncneOcene))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelOceneLetnika, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1Predmeti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxKoncneOcene))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(323, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ANALITIKA", jPanel3);

        jList2SeznamPredmetov.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2SeznamPredmetov.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2SeznamPredmetovMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList2SeznamPredmetov);

        jLabel4.setText("PREDMETI");

        jTableVnosObveznosti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Obveznost", "Utež ocene", "Ocena", "Povezanost Ocene"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVnosObveznosti.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVnosObveznostiMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableVnosObveznosti);

        jLabel5.setText("OBVEZNOSTI");

        jTextFieldDodajObveznost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDodajObveznostActionPerformed(evt);
            }
        });

        jLabel6.setText("Dodaj obveznost:");

        jLabel7.setText("Dodaj predmet:");

        jTextFieldDodajPredmet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDodajPredmetActionPerformed(evt);
            }
        });

        jButtonOdstraniPredmet.setText("Odstrani predmet");
        jButtonOdstraniPredmet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOdstraniPredmetActionPerformed(evt);
            }
        });

        jButtonOdstraniObveznost.setText("Odstrani obveznost");
        jButtonOdstraniObveznost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOdstraniObveznostActionPerformed(evt);
            }
        });

        jLabel8.setText("Vnos ocene:");

        jTextFieldVnosOcen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldVnosOcenActionPerformed(evt);
            }
        });

        jComboBoxOstaliPodatki.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Koda Predmeta", "Ime Nosilca", "Letnik", "Semester", "ECTS" }));
        jComboBoxOstaliPodatki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOstaliPodatkiActionPerformed(evt);
            }
        });

        jLabel9.setText("Vnos ostalih podatkov");

        jTextFieldOstaliPodatki.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOstaliPodatkiActionPerformed(evt);
            }
        });

        jTextAreaVsiPodatki.setEditable(false);
        jTextAreaVsiPodatki.setColumns(20);
        jTextAreaVsiPodatki.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextAreaVsiPodatki.setRows(5);
        jScrollPane3.setViewportView(jTextAreaVsiPodatki);

        jLabel3.setText("Vsi podatki:");

        jCheckBoxPodatkiObveznosti.setText("Podatki Obveznosti");
        jCheckBoxPodatkiObveznosti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPodatkiObveznostiActionPerformed(evt);
            }
        });

        jButtonOsveziPodatke.setText("Osveži");
        jButtonOsveziPodatke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOsveziPodatkeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                                    .addComponent(jTextFieldDodajPredmet))
                                .addComponent(jLabel9))
                            .addGap(69, 69, 69)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButtonOdstraniObveznost)
                                        .addComponent(jTextFieldDodajObveznost, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(22, 22, 22)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addComponent(jTextFieldVnosOcen, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)))
                                .addComponent(jScrollPane3)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jCheckBoxPodatkiObveznosti)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonOsveziPodatke)))))
                    .addComponent(jButtonOdstraniPredmet)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextFieldOstaliPodatki, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jComboBoxOstaliPodatki, javax.swing.GroupLayout.Alignment.LEADING, 0, 279, Short.MAX_VALUE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDodajObveznost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDodajPredmet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldVnosOcen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOdstraniPredmet)
                    .addComponent(jButtonOdstraniObveznost))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel3)
                    .addComponent(jCheckBoxPodatkiObveznosti)
                    .addComponent(jButtonOsveziPodatke))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jComboBoxOstaliPodatki, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldOstaliPodatki, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("VNOS PODATKOV", jPanel2);

        jLabel2.setText("Status:");

        javax.swing.GroupLayout jPanel4StatusLayout = new javax.swing.GroupLayout(jPanel4Status);
        jPanel4Status.setLayout(jPanel4StatusLayout);
        jPanel4StatusLayout.setHorizontalGroup(
            jPanel4StatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4StatusLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel4StatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4StatusLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap())))
        );
        jPanel4StatusLayout.setVerticalGroup(
            jPanel4StatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4StatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        jButtonIzhod.setText("Izhod");
        jButtonIzhod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIzhodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(jPanel4Status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton2Shrani, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1Nalozi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButtonIzhod))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1Nalozi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2Shrani)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4Status, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonIzhod))
                .addGap(61, 61, 61))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1NaloziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1NaloziActionPerformed
        if (temp == false) {
            stevec = beriBazo(predmet, stevec);
            izracunKoncneOcene(predmet, stevec);
            for (int i = 0; i < stevec; i++) {

                model.addElement(predmet[i].getImePredmeta());
                jTextAreaPredmeti.append(predmet[i].getImePredmeta() + "\n");
            }
            jList2SeznamPredmetov.setModel(model);
            jLabelStatus.setText("Evidenca naložena");
            temp = true;
        } else {
            jLabelStatus.setText("Evidenca že naložena!!");
        }
    }//GEN-LAST:event_jButton1NaloziActionPerformed

    private void jRadioButton1LetnikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1LetnikActionPerformed
        jTextAreaPredmeti.setText("");
        jComboBox1Predmeti.removeAllItems();
        letnik = 1;
        for (int i = 0; i < stevec; i++) {
            if (predmet[i].getLetnik() == 1) {
                jTextAreaPredmeti.append(predmet[i].getImePredmeta() + "\n");
                jComboBox1Predmeti.addItem(predmet[i].getImePredmeta());
            }
        }
        jLabelStatus.setText("Predmeti: 1.letnik");
        jLabelOceneLetnika.setText("1. letnik");
    }//GEN-LAST:event_jRadioButton1LetnikActionPerformed

    private void jRadioButton2LetnikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2LetnikActionPerformed
        jTextAreaPredmeti.setText("");
        jComboBox1Predmeti.removeAllItems();
        letnik = 2;
        for (int i = 0; i < stevec; i++) {
            if (predmet[i].getLetnik() == 2) {
                jTextAreaPredmeti.append(predmet[i].getImePredmeta() + "\n");
                jComboBox1Predmeti.addItem(predmet[i].getImePredmeta());
            }
        }
        jLabelStatus.setText("Predmeti: 2.letnik");
        jLabelOceneLetnika.setText("2. letnik");
    }//GEN-LAST:event_jRadioButton2LetnikActionPerformed

    private void jRadioButton3LetnikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3LetnikActionPerformed
        jTextAreaPredmeti.setText("");
        jComboBox1Predmeti.removeAllItems();
        letnik = 3;
        for (int i = 0; i < stevec; i++) {
            if (predmet[i].getLetnik() == 3) {
                jTextAreaPredmeti.append(predmet[i].getImePredmeta() + "\n");
                jComboBox1Predmeti.addItem(predmet[i].getImePredmeta());
            }
        }
        jLabelStatus.setText("Predmeti: 3.letnik");
        jLabelOceneLetnika.setText("3. letnik");
    }//GEN-LAST:event_jRadioButton3LetnikActionPerformed

    private void jRadioButtonVsiPredmetiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonVsiPredmetiActionPerformed
        jTextAreaPredmeti.setText("");
        jComboBox1Predmeti.removeAllItems();
        letnik = 0;
        for (int i = 0; i < stevec; i++) {
            jTextAreaPredmeti.append(predmet[i].getImePredmeta() + "\n");
            jComboBox1Predmeti.addItem(predmet[i].getImePredmeta());
        }
        jLabelStatus.setText("Predmeti: Vsi");
        jLabelOceneLetnika.setText("Vseh letnikov");
    }//GEN-LAST:event_jRadioButtonVsiPredmetiActionPerformed

    private void jButtonIzhodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIzhodActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonIzhodActionPerformed

    private void jComboBox1PredmetiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1PredmetiActionPerformed
        jTextAreaOceneObveznosti.setText("");

        for (int i = 0; i < stevec; i++) {
            if (predmet[i].getImePredmeta() == jComboBox1Predmeti.getSelectedItem()) {

                for (int j = 0; j < predmet[i].getStObveznosti(); j++) {

                    jTextAreaOceneObveznosti.append(predmet[i].poljeObveznosti[j].getImeObveznosti() + ": ");
                    jTextAreaOceneObveznosti.append(predmet[i].poljeObveznosti[j].getOcenaObveznosti() + "%\n");

                }
            }
        }
    }//GEN-LAST:event_jComboBox1PredmetiActionPerformed

    private void jCheckBoxKoncneOceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxKoncneOceneActionPerformed
        jTextAreaOceneObveznosti.setText("");
        //izracunKoncneOcene(predmet, stevec);
        if (jCheckBoxKoncneOcene.isSelected()) {
            for (int i = 0; i < stevec; i++) {
                if (letnik == predmet[i].getLetnik() || letnik == 0) {
                    jTextAreaOceneObveznosti.append(predmet[i].getImePredmeta() + ": ");
                    jTextAreaOceneObveznosti.append(predmet[i].getKoncnaOcena() + "\n");
                }
            }

            jComboBox1Predmeti.setEnabled(false);
        } else {
            jComboBox1Predmeti.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxKoncneOceneActionPerformed

    private void jCheckBoxKoncneOceneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxKoncneOceneStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxKoncneOceneStateChanged

    private void jTextFieldOstaliPodatkiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldOstaliPodatkiActionPerformed
        switch (ostaliPodatki) {
            case 0:
                predmet[temp_predmet].setKodaPredmeta(jTextFieldOstaliPodatki.getText());
                jLabelStatus.setText("Dodana koda predmeta: " + predmet[temp_predmet].getKodaPredmeta());

                break;
            case 1:
                predmet[temp_predmet].setImeNosilca(jTextFieldOstaliPodatki.getText());
                jLabelStatus.setText("Dodano ime nosilca: " + predmet[temp_predmet].getImeNosilca());
                break;
            case 2:
                predmet[temp_predmet].setLetnik(Integer.parseInt(jTextFieldOstaliPodatki.getText()));
                jLabelStatus.setText("Dodan letnik: " + predmet[temp_predmet].getLetnik());
                break;
            case 3:
                predmet[temp_predmet].setSemester(jTextFieldOstaliPodatki.getText());
                jLabelStatus.setText("Dodan semester: " + predmet[temp_predmet].getSemester());
                break;
            case 4:
                predmet[temp_predmet].setECTS(Integer.parseInt(jTextFieldOstaliPodatki.getText()));
                jLabelStatus.setText("Dodane točke ECTS : " + predmet[temp_predmet].getECTS());
                break;

        }
        jTextAreaVsiPodatki.setText("");
        for (int i = 0; i < stevec; i++) {
            if (predmet[i].getImePredmeta().equals(predmet[temp_predmet].getImePredmeta())) {
                jTextAreaVsiPodatki.append("Koda Predmeta: " + predmet[i].getKodaPredmeta() + "\n");
                jTextAreaVsiPodatki.append("Ime Predmeta: " + predmet[i].getImePredmeta() + "\n");
                jTextAreaVsiPodatki.append("Ime Nosilca: " + predmet[i].getImeNosilca() + "\n");
                jTextAreaVsiPodatki.append("Letnik: " + predmet[i].getLetnik() + "\n");
                jTextAreaVsiPodatki.append("Semester: " + predmet[i].getSemester() + "\n");
                jTextAreaVsiPodatki.append("ECTS: " + predmet[i].getECTS() + "\n");
                jTextAreaVsiPodatki.append("Število obveznosti: " + predmet[i].getStObveznosti() + "\n");
                jTextAreaVsiPodatki.append("Končna Ocena: " + predmet[i].getKoncnaOcena() + "\n");
            }

        }
        jTextFieldOstaliPodatki.setText("");
    }//GEN-LAST:event_jTextFieldOstaliPodatkiActionPerformed

    private void jComboBoxOstaliPodatkiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOstaliPodatkiActionPerformed

        if (jComboBoxOstaliPodatki.getSelectedItem() == "Koda Predmeta") {
            ostaliPodatki = 0;
        } else if (jComboBoxOstaliPodatki.getSelectedItem() == "Ime Nosilca") {
            ostaliPodatki = 1;
        } else if (jComboBoxOstaliPodatki.getSelectedItem() == "Letnik") {
            ostaliPodatki = 2;
        } else if (jComboBoxOstaliPodatki.getSelectedItem() == "Semester") {
            ostaliPodatki = 3;
        } else if (jComboBoxOstaliPodatki.getSelectedItem() == "ECTS") {
            ostaliPodatki = 4;
        }
    }//GEN-LAST:event_jComboBoxOstaliPodatkiActionPerformed

    private void jButtonOdstraniObveznostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOdstraniObveznostActionPerformed
        String a = jList2SeznamPredmetov.getSelectedValue();

        selectedRow = jTableVnosObveznosti.getSelectedRow();
        if (-1 != selectedRow) {
            for (int i = 0; i < stevec; i++) {
                if (predmet[i].getImePredmeta().equals(a)) {

                    int b = predmet[i].getStObveznosti();
                    b--;
                    if (b != selectedRow) {
                        tableModel.setRowCount(0);
                        predmet[i].poljeObveznosti[selectedRow].setImeObveznosti(predmet[i].poljeObveznosti[predmet[i].getStObveznosti() - 1].getImeObveznosti());
                        predmet[i].poljeObveznosti[selectedRow].setUtezObveznosti(predmet[i].poljeObveznosti[predmet[i].getStObveznosti() - 1].getUtezObveznosti());
                        predmet[i].poljeObveznosti[selectedRow].setOcenaObveznosti(predmet[i].poljeObveznosti[predmet[i].getStObveznosti() - 1].getOcenaObveznosti());
                        predmet[i].poljeObveznosti[selectedRow].setPovezanostOcene(predmet[i].poljeObveznosti[predmet[i].getStObveznosti() - 1].getPovezanostOcene());
                        jLabelStatus.setText("Odstranjena Obveznost: " + predmet[i].poljeObveznosti[predmet[i].getStObveznosti() - 1].getImeObveznosti());
                        for (int j = 0; j < predmet[i].getStObveznosti() - 1; j++) {
                            tableModel.insertRow(tableModel.getRowCount(), new Object[]{predmet[i].poljeObveznosti[j].getImeObveznosti(), predmet[i].poljeObveznosti[j].getUtezObveznosti(), predmet[i].poljeObveznosti[j].getOcenaObveznosti(), predmet[i].poljeObveznosti[j].getPovezanostOcene()});

                        }
                    } else if (b == selectedRow) {
                        tableModel.removeRow(selectedRow);
                        jLabelStatus.setText("Odstranjena Obveznost: " + predmet[i].poljeObveznosti[predmet[i].getStObveznosti() - 1].getImeObveznosti());

                    }

                    predmet[i].setStObveznosti(b);

                }

            }
        } else {
            jLabelStatus.setText("Izberi drugo obveznost za izbris");
        }
    }//GEN-LAST:event_jButtonOdstraniObveznostActionPerformed

    private void jButtonOdstraniPredmetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOdstraniPredmetActionPerformed
        String a = jList2SeznamPredmetov.getSelectedValue();
        model.remove(jList2SeznamPredmetov.getSelectedIndex());
        jList2SeznamPredmetov.setModel(model);
        for (int i = 0; i < stevec; i++) {
            if (predmet[i].getImePredmeta().equals(a) && i != stevec - 1) {
                predmet[i].setKodaPredmeta(predmet[stevec - 1].getKodaPredmeta());
                predmet[i].setImePredmeta(predmet[stevec - 1].getImePredmeta());
                predmet[i].setImeNosilca(predmet[stevec - 1].getImeNosilca());
                predmet[i].setLetnik(predmet[stevec - 1].getLetnik());
                predmet[i].setSemester(predmet[stevec - 1].getSemester());
                predmet[i].setECTS(predmet[stevec - 1].getECTS());

                for (int j = 0; j < predmet[stevec - 1].getStObveznosti(); j++) {
                    predmet[i].poljeObveznosti[j].setImeObveznosti(predmet[stevec - 1].poljeObveznosti[j].getImeObveznosti());
                    predmet[i].poljeObveznosti[j].setUtezObveznosti(predmet[stevec - 1].poljeObveznosti[j].getUtezObveznosti());
                    predmet[i].poljeObveznosti[j].setOcenaObveznosti(predmet[stevec - 1].poljeObveznosti[j].getOcenaObveznosti());
                    predmet[i].poljeObveznosti[j].setPovezanostOcene(predmet[stevec - 1].poljeObveznosti[j].getPovezanostOcene());
                }
                predmet[i].setStObveznosti(predmet[stevec - 1].getStObveznosti());
                predmet[i].setKoncnaOcena(predmet[stevec - 1].getKoncnaOcena());
                jLabelStatus.setText("Odstranjen predmet: " + predmet[i].getImePredmeta());
                i = stevec;
                stevec--;
            } else if (predmet[i].getImePredmeta().equals(a) && i == stevec - 1) {
                jLabelStatus.setText("Odstranjen predmet: " + predmet[i].getImePredmeta());
                stevec--;
            }

        }
    }//GEN-LAST:event_jButtonOdstraniPredmetActionPerformed

    private void jTextFieldDodajPredmetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDodajPredmetActionPerformed

        predmet[stevec] = new Predmet();

        predmet[stevec].setImePredmeta(jTextFieldDodajPredmet.getText());
        model.addElement(predmet[stevec].getImePredmeta());
        jList2SeznamPredmetov.setModel(model);
        jTextFieldDodajPredmet.setText("");
        jLabelStatus.setText("Dodan predmet: " + predmet[stevec].getImePredmeta());
        stevec++;
    }//GEN-LAST:event_jTextFieldDodajPredmetActionPerformed

    private void jTextFieldDodajObveznostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDodajObveznostActionPerformed
        String a = jList2SeznamPredmetov.getSelectedValue();
        if (predmet[temp_predmet].getStObveznosti() < 10) {
            for (int i = 0; i < stevec; i++) {
                if (predmet[i].getImePredmeta().equals(a)) {
                    int b = predmet[i].getStObveznosti();
                    tableModel.setRowCount(b);

                    predmet[i].setStObveznosti(b + 1);
                    predmet[i].poljeObveznosti[b].setImeObveznosti(jTextFieldDodajObveznost.getText());
                    jLabelStatus.setText("Dodana obveznost: " + jTextFieldDodajObveznost.getText());
                    predmet[i].poljeObveznosti[b].setUtezObveznosti(0);
                    predmet[i].poljeObveznosti[b].setOcenaObveznosti(0);
                    predmet[i].poljeObveznosti[b].setPovezanostOcene(0);
                    tableModel.insertRow(tableModel.getRowCount(), new Object[]{predmet[i].poljeObveznosti[b].getImeObveznosti(), predmet[i].poljeObveznosti[b].getUtezObveznosti(), predmet[i].poljeObveznosti[b].getOcenaObveznosti(), predmet[i].poljeObveznosti[b].getPovezanostOcene()});
                    i = stevec;

                }

            }
            jTextFieldDodajObveznost.setText("");
        } else {
            jLabelStatus.setText("Največ 10 obveznosti pri predmetu!");
        }
    }//GEN-LAST:event_jTextFieldDodajObveznostActionPerformed

    private void jTableVnosObveznostiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVnosObveznostiMouseClicked

        selectedRow = jTableVnosObveznosti.getSelectedRow();
        selectedColumn = jTableVnosObveznosti.getSelectedColumn();

        if (selectedRow >= 0 && selectedColumn >= 1) {
            Object selectedValue = jTableVnosObveznosti.getValueAt(selectedRow, selectedColumn);
            jTextFieldVnosOcen.setText(String.valueOf(selectedValue));
        }
    }//GEN-LAST:event_jTableVnosObveznostiMouseClicked

    private void jList2SeznamPredmetovMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2SeznamPredmetovMouseClicked
        String a = jList2SeznamPredmetov.getSelectedValue();
        tableModel.setRowCount(0);
        jTextAreaVsiPodatki.setText("");
        for (int i = 0; i < stevec; i++) {
            if (predmet[i].getImePredmeta().equals(a)) {
                temp_predmet = i;
                jTextAreaVsiPodatki.append("Koda Predmeta: " + predmet[i].getKodaPredmeta() + "\n");
                jTextAreaVsiPodatki.append("Ime Predmeta: " + predmet[i].getImePredmeta() + "\n");
                jTextAreaVsiPodatki.append("Ime Nosilca: " + predmet[i].getImeNosilca() + "\n");
                jTextAreaVsiPodatki.append("Letnik: " + predmet[i].getLetnik() + "\n");
                jTextAreaVsiPodatki.append("Semester: " + predmet[i].getSemester() + "\n");
                jTextAreaVsiPodatki.append("ECTS: " + predmet[i].getECTS() + "\n");
                jTextAreaVsiPodatki.append("Število obveznosti: " + predmet[i].getStObveznosti() + "\n");

                for (int j = 0; j < predmet[i].getStObveznosti(); j++) {
                    tableModel.insertRow(tableModel.getRowCount(), new Object[]{predmet[i].poljeObveznosti[j].getImeObveznosti(), predmet[i].poljeObveznosti[j].getUtezObveznosti(), predmet[i].poljeObveznosti[j].getOcenaObveznosti(), predmet[i].poljeObveznosti[j].getPovezanostOcene()});
                }
                jTextAreaVsiPodatki.append("Končna Ocena: " + predmet[i].getKoncnaOcena() + "\n");
                jLabelStatus.setText("Izbran predmet: " + predmet[i].getImePredmeta());
            }

        }
    }//GEN-LAST:event_jList2SeznamPredmetovMouseClicked

    private void jCheckBoxPodatkiObveznostiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPodatkiObveznostiActionPerformed
        //String a = jList2SeznamPredmetov.getSelectedValue();
        if (jCheckBoxPodatkiObveznosti.isSelected()) {
            for (int i = 0; i < stevec; i++) {
                if (predmet[i].getImePredmeta().equals(predmet[temp_predmet].getImePredmeta())) {

                    for (int j = 0; j < predmet[i].getStObveznosti(); j++) {
                        jTextAreaVsiPodatki.append("\n");
                        jTextAreaVsiPodatki.append("Ime Obveznosti: " + predmet[i].poljeObveznosti[j].getImeObveznosti() + "\n");
                        jTextAreaVsiPodatki.append("Utez Obveznosti: " + predmet[i].poljeObveznosti[j].getUtezObveznosti() + "\n");
                        jTextAreaVsiPodatki.append("Ocena Obveznosti: " + predmet[i].poljeObveznosti[j].getOcenaObveznosti() + "\n");
                        jTextAreaVsiPodatki.append("Povezanost Ocene: " + predmet[i].poljeObveznosti[j].getPovezanostOcene() + "\n");
                    }
                }

            }
        } else {
            jTextAreaVsiPodatki.setText("");
            for (int i = 0; i < stevec; i++) {
                if (predmet[i].getImePredmeta().equals(predmet[temp_predmet].getImePredmeta())) {
                    jTextAreaVsiPodatki.append("Koda Predmeta: " + predmet[i].getKodaPredmeta() + "\n");
                    jTextAreaVsiPodatki.append("Ime Predmeta: " + predmet[i].getImePredmeta() + "\n");
                    jTextAreaVsiPodatki.append("Ime Nosilca: " + predmet[i].getImeNosilca() + "\n");
                    jTextAreaVsiPodatki.append("Letnik: " + predmet[i].getLetnik() + "\n");
                    jTextAreaVsiPodatki.append("Semester: " + predmet[i].getSemester() + "\n");
                    jTextAreaVsiPodatki.append("ECTS: " + predmet[i].getECTS() + "\n");
                    jTextAreaVsiPodatki.append("Število obveznosti: " + predmet[i].getStObveznosti() + "\n");
                    jTextAreaVsiPodatki.append("Končna Ocena: " + predmet[i].getKoncnaOcena() + "\n");
                }

            }
        }
    }//GEN-LAST:event_jCheckBoxPodatkiObveznostiActionPerformed

    private void jButton2ShraniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ShraniActionPerformed
        izracunKoncneOcene(predmet, stevec);
        shraniSpremembe(predmet, stevec);
        jLabelStatus.setText("Evidenca shranjena.");
    }//GEN-LAST:event_jButton2ShraniActionPerformed

    private void jTextFieldVnosOcenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldVnosOcenActionPerformed
        if (selectedColumn != 0) {
            String a = jTextFieldVnosOcen.getText();
            try {
                
            
            switch (selectedColumn) {
                case 1:
                    predmet[temp_predmet].poljeObveznosti[selectedRow].setUtezObveznosti(Integer.parseInt(jTextFieldVnosOcen.getText()));
                    jLabelStatus.setText("Nastavljena Utez Obveznosti: " + predmet[temp_predmet].poljeObveznosti[selectedRow].getUtezObveznosti());
                    tableModel.setValueAt(Integer.parseInt(jTextFieldVnosOcen.getText()), selectedRow, selectedColumn);
                    break;
                case 2:
                    predmet[temp_predmet].poljeObveznosti[selectedRow].setOcenaObveznosti(Double.parseDouble(jTextFieldVnosOcen.getText()));
                    jLabelStatus.setText("Nastavljena Ocena Obveznosti: " + predmet[temp_predmet].poljeObveznosti[selectedRow].getOcenaObveznosti());
                    tableModel.setValueAt(Double.parseDouble(jTextFieldVnosOcen.getText()), selectedRow, selectedColumn);
                    break;
                case 3:
                    predmet[temp_predmet].poljeObveznosti[selectedRow].setPovezanostOcene(Integer.parseInt(jTextFieldVnosOcen.getText()));
                    jLabelStatus.setText("Nastavljena Povezanost Ocene: " + predmet[temp_predmet].poljeObveznosti[selectedRow].getPovezanostOcene());
                    tableModel.setValueAt(Integer.parseInt(jTextFieldVnosOcen.getText()), selectedRow, selectedColumn);
                    break;
            }
            } catch (NumberFormatException e) {
                jLabelStatus.setText("Vnos mora biti številka!");
            }
            //tableModel.setValueAt(Double.parseDouble(jTextFieldVnosOcen.getText()), selectedRow, selectedColumn);

            // Notify the table that the model has changed
            tableModel.fireTableCellUpdated(selectedRow, selectedColumn);
        }
    }//GEN-LAST:event_jTextFieldVnosOcenActionPerformed

    private void jButtonOsveziPodatkeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOsveziPodatkeActionPerformed
        jTextAreaVsiPodatki.setText("");
        izracunKoncneOcene(predmet, stevec);
        if (jCheckBoxPodatkiObveznosti.isSelected()) {
            for (int i = 0; i < stevec; i++) {
                if (predmet[i].getImePredmeta().equals(predmet[temp_predmet].getImePredmeta())) {
                    jTextAreaVsiPodatki.append("Koda Predmeta: " + predmet[i].getKodaPredmeta() + "\n");
                    jTextAreaVsiPodatki.append("Ime Predmeta: " + predmet[i].getImePredmeta() + "\n");
                    jTextAreaVsiPodatki.append("Ime Nosilca: " + predmet[i].getImeNosilca() + "\n");
                    jTextAreaVsiPodatki.append("Letnik: " + predmet[i].getLetnik() + "\n");
                    jTextAreaVsiPodatki.append("Semester: " + predmet[i].getSemester() + "\n");
                    jTextAreaVsiPodatki.append("ECTS: " + predmet[i].getECTS() + "\n");
                    jTextAreaVsiPodatki.append("Število obveznosti: " + predmet[i].getStObveznosti() + "\n");
                    jTextAreaVsiPodatki.append("Končna Ocena: " + predmet[i].getKoncnaOcena() + "\n");
                    for (int j = 0; j < predmet[i].getStObveznosti(); j++) {
                        jTextAreaVsiPodatki.append("\n");
                        jTextAreaVsiPodatki.append("Ime Obveznosti: " + predmet[i].poljeObveznosti[j].getImeObveznosti() + "\n");
                        jTextAreaVsiPodatki.append("Utez Obveznosti: " + predmet[i].poljeObveznosti[j].getUtezObveznosti() + "\n");
                        jTextAreaVsiPodatki.append("Ocena Obveznosti: " + predmet[i].poljeObveznosti[j].getOcenaObveznosti() + "\n");
                        jTextAreaVsiPodatki.append("Povezanost Ocene: " + predmet[i].poljeObveznosti[j].getPovezanostOcene() + "\n");
                    }
                }
            }
        } else {
            for (int i = 0; i < stevec; i++) {
                if (predmet[i].getImePredmeta().equals(predmet[temp_predmet].getImePredmeta())) {
                    jTextAreaVsiPodatki.append("Koda Predmeta: " + predmet[i].getKodaPredmeta() + "\n");
                    jTextAreaVsiPodatki.append("Ime Predmeta: " + predmet[i].getImePredmeta() + "\n");
                    jTextAreaVsiPodatki.append("Ime Nosilca: " + predmet[i].getImeNosilca() + "\n");
                    jTextAreaVsiPodatki.append("Letnik: " + predmet[i].getLetnik() + "\n");
                    jTextAreaVsiPodatki.append("Semester: " + predmet[i].getSemester() + "\n");
                    jTextAreaVsiPodatki.append("ECTS: " + predmet[i].getECTS() + "\n");
                    jTextAreaVsiPodatki.append("Število obveznosti: " + predmet[i].getStObveznosti() + "\n");
                    jTextAreaVsiPodatki.append("Končna Ocena: " + predmet[i].getKoncnaOcena() + "\n");

                }
            }
        }
        jLabelStatus.setText("Podatki osveženi");
    }//GEN-LAST:event_jButtonOsveziPodatkeActionPerformed

    /**
     * @param args the command line arguments
     */
    final static int N = 30;

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaRV8gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaRV8gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaRV8gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaRV8gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JavaRV8gui().setVisible(true);
            }
        });
    }

    static int beriBazo(Predmet predmet[], int stevec) {

        Scanner vhod = null;

        // ustvari vhodni podatkovni tok
        try {
            vhod = new Scanner(new FileReader("evidenca.txt"));
        } catch (FileNotFoundException e) {
            System.out.println("Napaka pri odpiranju datoteke evidenca.txt!");
            exit(1);
        }

        // vnos podatkov v polje objektov
        while (vhod.hasNext()) {
            String vsebina = vhod.nextLine();
            String poljeVsebine[] = vsebina.split("\t");
            int temp_st = 0;

            predmet[stevec] = new Predmet();

            predmet[stevec].setKodaPredmeta(poljeVsebine[temp_st++]);
            predmet[stevec].setImePredmeta(poljeVsebine[temp_st++]);
            predmet[stevec].setImeNosilca(poljeVsebine[temp_st++]);
            predmet[stevec].setLetnik(Integer.parseInt(poljeVsebine[temp_st++]));
            predmet[stevec].setSemester(poljeVsebine[temp_st++]);
            predmet[stevec].setECTS(Integer.parseInt(poljeVsebine[temp_st++]));
            predmet[stevec].setStObveznosti(Integer.parseInt(poljeVsebine[temp_st++]));

            for (int i = 0; i < predmet[stevec].getStObveznosti(); i++) {
                predmet[stevec].poljeObveznosti[i].setImeObveznosti(poljeVsebine[temp_st++]);
                predmet[stevec].poljeObveznosti[i].setUtezObveznosti(Integer.parseInt(poljeVsebine[temp_st++]));
                predmet[stevec].poljeObveznosti[i].setOcenaObveznosti(Double.parseDouble(poljeVsebine[temp_st++]));
                predmet[stevec].poljeObveznosti[i].setPovezanostOcene(Integer.parseInt(poljeVsebine[temp_st++]));
            }
            predmet[stevec].setKoncnaOcena(Integer.parseInt(poljeVsebine[temp_st++]));
            stevec++;
        }

        return stevec;
    }

    static void shraniSpremembe(Predmet predmet[], int stevec) {

        PrintWriter izhod = null;

        try {
            izhod = new PrintWriter(new FileWriter("evidenca.txt"));
        } catch (IOException ex) {
            System.out.println("Napaka pri odpiranju datoteke evidenca.txt!");
            return;
        }

        for (int i = 0; i < stevec; i++) {
            String vsebina = predmet[i].getKodaPredmeta() + "\t" + predmet[i].getImePredmeta() + "\t" + predmet[i].getImeNosilca() + "\t" + predmet[i].getLetnik() + "\t" + predmet[i].getSemester() + "\t" + predmet[i].getECTS() + "\t" + predmet[i].getStObveznosti() + "\t";
            for (int j = 0; j < predmet[i].getStObveznosti(); j++) {
                vsebina = vsebina + predmet[i].poljeObveznosti[j].getImeObveznosti() + "\t" + predmet[i].poljeObveznosti[j].getUtezObveznosti() + "\t" + predmet[i].poljeObveznosti[j].getOcenaObveznosti() + "\t" + predmet[i].poljeObveznosti[j].getPovezanostOcene() + "\t";
            }
            vsebina = vsebina + predmet[i].getKoncnaOcena();
            izhod.println(vsebina);
        }

        izhod.close();

    }

    static void izracunKoncneOcene(Predmet predmet[], int stevec) {

        for (int j = 0; j < stevec; j++) {
            double koncnaOcena = 0.0;
            double[] ocena_temp_sodo = new double[10];
            int inkrement_sodo = 0;
            double[] ocena_temp_liho1 = new double[10];
            double[] ocena_temp_liho3 = new double[10];
            double[] ocena_temp_liho5 = new double[10];
            int inkrement_liho1 = 0;
            int inkrement_liho3 = 0;
            int inkrement_liho5 = 0;
            double pomocIzracuna1 = 0.0, pomocIzracuna2 = 0.0, a, b;

            for (int i = 0; i < predmet[j].getStObveznosti(); i++) {

                if (predmet[j].poljeObveznosti[i].getPovezanostOcene() % 2 == 0 && predmet[j].poljeObveznosti[i].getPovezanostOcene() != 0) {
                    a = predmet[j].poljeObveznosti[i].getOcenaObveznosti();
                    b = predmet[j].poljeObveznosti[i].getUtezObveznosti();
                    ocena_temp_sodo[inkrement_sodo] = a * (b / 100);
                    inkrement_sodo++;
                } else if (predmet[j].poljeObveznosti[i].getPovezanostOcene() % 2 != 0 && predmet[j].poljeObveznosti[i].getPovezanostOcene() != 0) {
                    if (predmet[j].poljeObveznosti[i].getPovezanostOcene() == 1) {
                        a = predmet[j].poljeObveznosti[i].getOcenaObveznosti();
                        b = predmet[j].poljeObveznosti[i].getUtezObveznosti();
                        ocena_temp_liho1[inkrement_liho1] = a * (b / 100);
                        inkrement_liho1++;
                    } else if (predmet[j].poljeObveznosti[i].getPovezanostOcene() == 3) {
                        a = predmet[j].poljeObveznosti[i].getOcenaObveznosti();
                        b = predmet[j].poljeObveznosti[i].getUtezObveznosti();
                        ocena_temp_liho3[inkrement_liho3] = a * (b / 100);
                        inkrement_liho3++;
                    } else if (predmet[j].poljeObveznosti[i].getPovezanostOcene() == 5) {
                        a = predmet[j].poljeObveznosti[i].getOcenaObveznosti();
                        b = predmet[j].poljeObveznosti[i].getUtezObveznosti();
                        ocena_temp_liho5[inkrement_liho5] = a * (b / 100);
                        inkrement_liho5++;

                    }

                } else if (predmet[j].poljeObveznosti[i].getPovezanostOcene() == 0) {

                    //koncnaOcena += predmet[j].poljeObveznosti[i].getOcenaObveznosti() * (predmet[j].poljeObveznosti[i].getUtezObveznosti() / 100);
                    a = predmet[j].poljeObveznosti[i].getOcenaObveznosti();
                    b = predmet[j].poljeObveznosti[i].getUtezObveznosti();
                    koncnaOcena += a * (b / 100);
                }
            }
            for (int x = 0; x < inkrement_sodo; x++) {
                switch (x) {
                    case 0:
                        pomocIzracuna1 = 0.0;
                        for (int i = 0; i < inkrement_liho1; i++) {
                            pomocIzracuna1 += ocena_temp_liho1[i];
                        }
                        if (ocena_temp_sodo[x] > pomocIzracuna1) {
                            koncnaOcena += ocena_temp_sodo[x];
                        } else {
                            koncnaOcena += pomocIzracuna1;
                        }
                        break;
                    case 1:
                        pomocIzracuna1 = 0.0;
                        for (int i = 0; i < inkrement_liho3; i++) {
                            pomocIzracuna1 += ocena_temp_liho3[i];
                        }
                        if (ocena_temp_sodo[x] > pomocIzracuna1) {
                            koncnaOcena += ocena_temp_sodo[x];
                        } else {
                            koncnaOcena += pomocIzracuna1;
                        }
                        break;
                    case 2:
                        pomocIzracuna1 = 0.0;
                        for (int i = 0; i < inkrement_liho5; i++) {
                            pomocIzracuna1 += ocena_temp_liho5[i];
                        }
                        if (ocena_temp_sodo[x] > pomocIzracuna1) {
                            koncnaOcena += ocena_temp_sodo[x];
                        } else {
                            koncnaOcena += pomocIzracuna1;
                        }
                        break;

                }

            }
            if (koncnaOcena >= 90) {
                predmet[j].setKoncnaOcena(10);
            } else if (koncnaOcena >= 80 && koncnaOcena < 90) {
                predmet[j].setKoncnaOcena(9);
            } else if (koncnaOcena >= 70 && koncnaOcena < 80) {
                predmet[j].setKoncnaOcena(8);
            } else if (koncnaOcena >= 60 && koncnaOcena < 70) {
                predmet[j].setKoncnaOcena(7);
            } else if (koncnaOcena >= 50 && koncnaOcena < 60) {
                predmet[j].setKoncnaOcena(6);
            } else if (koncnaOcena >= 40 && koncnaOcena < 50) {
                predmet[j].setKoncnaOcena(5);
            } else if (koncnaOcena >= 30 && koncnaOcena < 40) {
                predmet[j].setKoncnaOcena(4);
            } else if (koncnaOcena >= 20 && koncnaOcena < 30) {
                predmet[j].setKoncnaOcena(3);
            } else if (koncnaOcena >= 10 && koncnaOcena < 20) {
                predmet[j].setKoncnaOcena(2);
            } else if (koncnaOcena >= 0 && koncnaOcena < 10) {
                predmet[j].setKoncnaOcena(1);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupLetniki;
    private javax.swing.JButton jButton1Nalozi;
    private javax.swing.JButton jButton2Shrani;
    private javax.swing.JButton jButtonIzhod;
    private javax.swing.JButton jButtonOdstraniObveznost;
    private javax.swing.JButton jButtonOdstraniPredmet;
    private javax.swing.JButton jButtonOsveziPodatke;
    private javax.swing.JCheckBox jCheckBoxKoncneOcene;
    private javax.swing.JCheckBox jCheckBoxPodatkiObveznosti;
    private javax.swing.JComboBox<String> jComboBox1Predmeti;
    private javax.swing.JComboBox<String> jComboBoxOstaliPodatki;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1SeznamPredmetov;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelOceneLetnika;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JList<String> jList2SeznamPredmetov;
    private javax.swing.JPanel jPanel1Predmeti;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4Status;
    private javax.swing.JRadioButton jRadioButton1Letnik;
    private javax.swing.JRadioButton jRadioButton2Letnik;
    private javax.swing.JRadioButton jRadioButton3Letnik;
    private javax.swing.JRadioButton jRadioButtonVsiPredmeti;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableVnosObveznosti;
    private javax.swing.JTextArea jTextAreaOceneObveznosti;
    private javax.swing.JTextArea jTextAreaPredmeti;
    private javax.swing.JTextArea jTextAreaVsiPodatki;
    private javax.swing.JTextField jTextFieldDodajObveznost;
    private javax.swing.JTextField jTextFieldDodajPredmet;
    private javax.swing.JTextField jTextFieldOstaliPodatki;
    private javax.swing.JTextField jTextFieldVnosOcen;
    // End of variables declaration//GEN-END:variables
}
